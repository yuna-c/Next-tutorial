import Header from "@/components/header/header";
import "./styles/globals.scss";
import { Roboto } from "next/font/google";
import clsx from "clsx";
//npm i clsx

/*
  외부폰트 적용시 display 옵션별 기능 설명
  참조링크: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display
  auto: 사용하는 브라우저의 user agent설정값에 따라서 자동으로 외부폰트 적용설정을 사용
  block: 적은 대기시간 설정후 외부폰트 적용될때까지 계속해도 시도
  swap: block보다 대기시간을 더 짧게 설정하고 외부폰트 적용될때까지 계속 시도
  fallback: 대기시간도 짧게 폰트적용도 시도도 짧게 처리해서 외부폰트 미적용시 바로 대체 시스템폰트 적용
  optional: 대기시간을 짧게 설정하고 외부폰트 시도를 무시

  block period: 외부폰트가 import되기 아무것도 보이지 대채폰트가 적용된 상태
  font swap period: 외부폰트를 적용하려고 시도하는 상태
  failure period: 외부폰트 연결을 실패로 인지하는 상태
*/

const roboto = Roboto({
  weight: "400",
  subsets: ["latin"],
  display: "swap",
  preload: true, //subsets가 지정되어 있을시 프리로드 기능사용
  variable: "--font-roboto", //직접 변수명 등록
});

const isRoboto = true;
console.log(roboto);

export const metadata = {
  title: "Main Page",
  description: "Generated by Next.js",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      {/* clsx활용시 변수에 조건문 적용 가능 */}
      <body className={clsx("wrap", isRoboto && roboto.variable)}>
        <Header />
        {/* <h2>Hello Roboto</h2> */}

        {children}
        {/* <button className="btn">BTN BTN</button> */}
      </body>
    </html>
  );
}

/*
  Next에서의 기능별 컴포넌트 구분
  Page Component 
  --페이지로 출력될 틀 컴포넌트 
  --about/page.jsx, gallery/page.jsx
  --따로 설정을 하지 않으면 기본적으로 Server에서 동작되서 prepage로 사전 렌더링
  Partial Component 
  --페이지 안쪽에서 호출되면서 부분적인 UI나 기능을 담당하는 컴포넌트 
  --componets>header.jsx, componets/popup.jsx 같은 것들
  -- Router
*/

/*
SSR vs CSR
SSR - Server Side Rendering
- 페이지 이동시마다 일일이 서버쪽에 출력할 Html 파일을 요청
- 장점 : 초기 로딩속도 빠름, 검색엔진에 최적화(SEO에 좋음)
- 단점 : 페이지 이동시 마다 서버쪽 요청을 해야되므로 깜빡거리면서 로딩되며 페이지 변경
CSR - Client Side Rendering
- 초기에 빈 Html 파일을 서버쪽에서 가져옴, 이때 화면에 출력될 모든 데이터를 chunk단위로 구성된 자바스크립트 파일을 모두 가져옴
- 장점 : 한번에 모든 페이지 데이터를 미리 다 불러오기 때문에 페이지 변경 요청시마다 서버요청 없이 클라이언트에서 부드럽게 화면 전환
- 단점 : 한번에 모든 데이터를 불러오기 때문에 초기 로딩속도가 SSR방식에 비해서 느림, 검색엔진에 최적화 안되어 있음
*/
